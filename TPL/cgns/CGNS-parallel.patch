From cf4db3957901313c9ba4ccc8b3f5dc2fab642ab1 Mon Sep 17 00:00:00 2001
From: Greg Sjaardema <gsjaardema@gmail.com>
Date: Mon, 4 Feb 2019 10:11:09 -0700
Subject: [PATCH] Proof-of-concept for allowing file-per-processor and
 single-file parallel output

---
 src/adfh/ADFH.c |  8 ++++++--
 src/cgns_io.c   | 50 +++++++++++++++++++++++++++++++++++++++++++++----
 2 files changed, 52 insertions(+), 6 deletions(-)

diff --git a/src/adfh/ADFH.c b/src/adfh/ADFH.c
index ce9ae13..77dfc3e 100644
--- a/src/adfh/ADFH.c
+++ b/src/adfh/ADFH.c
@@ -2385,9 +2385,13 @@ void ADFH_Database_Close(const double  root,
 
   ADFH_DEBUG(("ADFH_Database_Close 1"));
   idx=0;
-  for (n = 0; n < ADFH_MAXIMUM_FILES; n++)  idx+=mta_root->g_files[n];
+  for (n = 0; n < ADFH_MAXIMUM_FILES; n++)  {
+    if (mta_root->g_files[n] > 0) {
+      idx++;
+    }
+  }
   /* if no more files open, close properties and free MTA */
-  if (!idx) {
+  if (idx == 0) {
     H5Pclose(mta_root->g_proplink);
     H5Pclose(mta_root->g_propgroupcreate);
     H5Pclose(mta_root->g_propdataset);
diff --git a/src/cgns_io.c b/src/cgns_io.c
index fecb730..ecc14ee 100644
--- a/src/cgns_io.c
+++ b/src/cgns_io.c
@@ -45,12 +45,12 @@ char hdf5_access[64] = "NATIVE";
 #ifdef MEM_DEBUG
 #include "cg_malloc.h"
 #endif
+int pcg_mpi_initialized;
 #ifdef BUILD_PARALLEL
 #include <mpi.h>
 MPI_Comm pcg_mpi_comm=MPI_COMM_WORLD;
 int pcg_mpi_comm_size;
 int pcg_mpi_comm_rank;
-int pcg_mpi_initialized;
 MPI_Info pcg_mpi_info;
 #endif
 
@@ -66,6 +66,7 @@ MPI_Info pcg_mpi_info;
 typedef struct {
     int type;
     int mode;
+    int mpi_initialized;
     double rootid;
 } cgns_io;
 
@@ -584,7 +585,7 @@ int cgio_check_file (const char *filename, int *file_type)
 
 #ifdef BUILD_PARALLEL
     /* don't overload the file system by having all the processors doing a read */
-    if(pcg_mpi_comm_rank == 0) {
+    if(!pcg_mpi_initialized || pcg_mpi_comm_rank == 0) {
 #endif
 
       fp = fopen(filename, "rb");
@@ -800,6 +801,11 @@ int cgio_open_file (const char *filename, int file_mode,
     }
     iolist[n].type = file_type;
     iolist[n].mode = file_mode;
+#ifdef BUILD_PARALLEL
+    iolist[n].mpi_initialized = pcg_mpi_initialized;
+#else
+    iolist[n].mpi_initialized = 0;
+#endif
     iolist[n].rootid = rootid;
     *cgio_num = n + 1;
     num_open++;
@@ -811,8 +817,8 @@ int cgio_open_file (const char *filename, int file_mode,
 
 int cgio_close_file (int cgio_num)
 {
-    int ierr;
-    cgns_io *cgio;
+    int ierr = 0;
+    cgns_io *cgio = NULL;
 
     if ((cgio = get_cgnsio(cgio_num, 0)) == NULL)
         return get_error();
@@ -823,6 +829,7 @@ int cgio_close_file (int cgio_num)
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Database_Close(cgio->rootid, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -908,6 +915,7 @@ int cgio_flush_to_disk (int cgio_num)
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Flush_to_Disk(cgio->rootid, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -937,6 +945,7 @@ int cgio_library_version (int cgio_num, char *version)
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Library_Version(version, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -966,6 +975,7 @@ int cgio_file_version (int cgio_num, char *file_version,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Database_Version(cgio->rootid, file_version,
             creation_date, modified_date, &ierr);
         if (ierr > 0) return set_error(ierr);
@@ -1088,6 +1098,7 @@ int cgio_create_node (int cgio_num, double pid,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Create(pid, name, id, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1127,6 +1138,7 @@ int cgio_new_node (int cgio_num, double pid, const char *name,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Create(pid, name, id, &ierr);
         if (ierr > 0) return set_error(ierr);
         ADFH_Set_Label(*id, label, &ierr);
@@ -1164,6 +1176,7 @@ int cgio_delete_node (int cgio_num, double pid, double id)
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Delete(pid, id, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1192,6 +1205,7 @@ int cgio_move_node (int cgio_num, double pid, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Move_Child(pid, id, new_pid, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1318,6 +1334,7 @@ int cgio_release_id (int cgio_num, double id)
     if ((cgio = get_cgnsio(cgio_num, 0)) == NULL)
         return get_error();
     if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Release_ID(id);
     }
 #endif
@@ -1343,6 +1360,7 @@ int cgio_is_link (int cgio_num, double id, int *link_len)
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Is_Link(id, link_len, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1371,6 +1389,7 @@ int cgio_link_size (int cgio_num, double id, int *file_len,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Link_Size(id, file_len, name_len, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1399,6 +1418,7 @@ int cgio_create_link (int cgio_num, double pid, const char *name,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Link(pid, name, filename, name_in_file, id, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1427,6 +1447,7 @@ int cgio_get_link (int cgio_num, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Get_Link_Path(id, filename, name_in_file, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1457,6 +1478,7 @@ int cgio_number_children (int cgio_num, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Number_of_Children(id, num_children, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1485,6 +1507,7 @@ int cgio_children_ids (int cgio_num, double pid,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Children_IDs(pid, start, max_ret, num_ret, ids, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1514,6 +1537,7 @@ int cgio_children_names (int cgio_num, double pid, int start, int max_ret,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Children_Names(pid, start, max_ret, name_len,
             num_ret, names, &ierr);
         if (ierr > 0) return set_error(ierr);
@@ -1545,6 +1569,7 @@ int cgio_get_node_id (int cgio_num, double pid,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Get_Node_ID(pid, name, id, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1572,6 +1597,7 @@ int cgio_get_name (int cgio_num, double id, char *name)
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Get_Name(id, name, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1599,6 +1625,7 @@ int cgio_get_label (int cgio_num, double id, char *label)
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Get_Label(id, label, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1626,6 +1653,7 @@ int cgio_get_data_type (int cgio_num, double id, char *data_type)
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Get_Data_Type(id, data_type, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1675,6 +1703,7 @@ int cgio_get_dimensions (int cgio_num, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Get_Number_of_Dimensions(id, num_dims, &ierr);
         if (NULL != dims && ierr <= 0 && *num_dims > 0) {
             ADFH_Get_Dimension_Values(id, dims, &ierr);
@@ -1705,6 +1734,7 @@ int cgio_read_all_data (int cgio_num, double id, void *data)
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Read_All_Data(id, NULL, (char *)data, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1734,6 +1764,7 @@ int cgio_read_all_data_type (int cgio_num, double id, const char *m_data_type,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Read_All_Data(id, m_data_type, (char *)data, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1762,6 +1793,7 @@ int cgio_read_block_data (int cgio_num, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Read_Block_Data(id, b_start, b_end, (char *)data, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1794,6 +1826,7 @@ int cgio_read_data (int cgio_num, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Read_Data(id, s_start, s_end, s_stride, NULL, m_num_dims,
             m_dims, m_start, m_end, m_stride, (char *)data, &ierr);
         if (ierr > 0) return set_error(ierr);
@@ -1827,6 +1860,7 @@ int cgio_read_data_type (int cgio_num, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Read_Data(id, s_start, s_end, s_stride, m_data_type, m_num_dims,
             m_dims, m_start, m_end, m_stride, (char *)data, &ierr);
         if (ierr > 0) return set_error(ierr);
@@ -1858,6 +1892,7 @@ int cgio_set_name (int cgio_num, double pid, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Put_Name(pid, id, name, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1885,6 +1920,7 @@ int cgio_set_label (int cgio_num, double id, const char *label)
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Set_Label(id, label, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1913,6 +1949,7 @@ int cgio_set_dimensions (int cgio_num, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Put_Dimension_Information(id, data_type, num_dims, dims, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1941,6 +1978,7 @@ int cgio_write_all_data (int cgio_num, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Write_All_Data(id, NULL, (const char *)data, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1970,6 +2008,7 @@ int cgio_write_all_data_type (int cgio_num, double id, const char *m_data_type,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Write_All_Data(id, m_data_type, (const char *)data, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -1998,6 +2037,7 @@ int cgio_write_block_data (int cgio_num, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Write_Block_Data(id, b_start, b_end, (char *)data, &ierr);
         if (ierr > 0) return set_error(ierr);
     }
@@ -2030,6 +2070,7 @@ int cgio_write_data (int cgio_num, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Write_Data(id, s_start, s_end, s_stride, NULL, m_num_dims,
             m_dims, m_start, m_end, m_stride, (const char *)data, &ierr);
         if (ierr > 0) return set_error(ierr);
@@ -2063,6 +2104,7 @@ int cgio_write_data_type (int cgio_num, double id,
     }
 #ifdef BUILD_HDF5
     else if (cgio->type == CGIO_FILE_HDF5) {
+        pcg_mpi_initialized = cgio->mpi_initialized;
         ADFH_Write_Data(id, s_start, s_end, s_stride, m_data_type, m_num_dims,
             m_dims, m_start, m_end, m_stride, (const char *)data, &ierr);
         if (ierr > 0) return set_error(ierr);
-- 
2.20.1

From d7d1f195f433c5f1a002e6e986c2011438dc7c0b Mon Sep 17 00:00:00 2001
From: Greg Sjaardema <gsjaardema@gmail.com>
Date: Tue, 5 Feb 2019 08:06:43 -0700
Subject: [PATCH] Eliminate C99 style for loop -- unneeded

Eliminate for loops of the form `for (int n=....` . In this case, the only change needed is to remove the `int` since `n` is already declared in the routines and the `int n` is just causing a shadowing of the previously defined `n`.  Also eliminates need to use C99 or later standard when compiling.
---
 src/pcgnslib.c | 24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/src/pcgnslib.c b/src/pcgnslib.c
index 38903746..2ea06625 100644
--- a/src/pcgnslib.c
+++ b/src/pcgnslib.c
@@ -551,10 +551,10 @@ int cgp_coord_general_write_data(int fn, int B, int Z, int C,
     cgsize_t stride[CGIO_MAX_DIMENSIONS];
     if (coords) {
         cgsize_t s_dimvals[CGIO_MAX_DIMENSIONS];
-        for (int n=0; n<s_numdim; n++) {
+        for (n=0; n<s_numdim; n++) {
             s_dimvals[n] = zcoor->coord[C-1].dim_vals[n];
         }
-        for (int n=0; n<m_numdim; n++) {
+        for (n=0; n<m_numdim; n++) {
             m_dimvals[n] = m_arg_dimvals[n];
         }
          /* verify the ranges provided and set s_rmin and s_rmax giving internal
@@ -689,10 +689,10 @@ int cgp_coord_general_read_data(int fn, int B, int Z, int C,
     cgsize_t stride[CGIO_MAX_DIMENSIONS];
     if (coords) {
         cgsize_t s_dimvals[CGIO_MAX_DIMENSIONS];
-        for (int n=0; n<s_numdim; n++) {
+        for (n=0; n<s_numdim; n++) {
             s_dimvals[n] = zcoor->coord[C-1].dim_vals[n];
         }
-        for (int n=0; n<m_numdim; n++) {
+        for (n=0; n<m_numdim; n++) {
             m_dimvals[n] = m_arg_dimvals[n];
         }
          /* verify the ranges provided and set s_rmin and s_rmax giving internal
@@ -1049,10 +1049,10 @@ int cgp_field_general_write_data(int fn, int B, int Z, int S, int F,
     cgsize_t stride[CGIO_MAX_DIMENSIONS];
     if (data) {
         cgsize_t s_dimvals[CGIO_MAX_DIMENSIONS];
-        for (int n=0; n<s_numdim; n++) {
+        for (n=0; n<s_numdim; n++) {
             s_dimvals[n] = field->dim_vals[n];
         }
-        for (int n=0; n<m_numdim; n++) {
+        for (n=0; n<m_numdim; n++) {
             m_dimvals[n] = m_arg_dimvals[n];
         }
          /* verify the ranges provided and set s_rmin and s_rmax giving internal
@@ -1172,10 +1172,10 @@ int cgp_field_general_read_data(int fn, int B, int Z, int S, int F,
     cgsize_t stride[CGIO_MAX_DIMENSIONS];
     if (data) {
         cgsize_t s_dimvals[CGIO_MAX_DIMENSIONS];
-        for (int n=0; n<s_numdim; n++) {
+        for (n=0; n<s_numdim; n++) {
             s_dimvals[n] = field->dim_vals[n];
         }
-        for (int n=0; n<m_numdim; n++) {
+        for (n=0; n<m_numdim; n++) {
             m_dimvals[n] = m_arg_dimvals[n];
         }
          /* verify the ranges provided and set s_rmin and s_rmax giving internal
@@ -1314,10 +1314,10 @@ int cgp_array_general_write_data(int A,
     cgsize_t stride[CGIO_MAX_DIMENSIONS];
     if (data) {
         cgsize_t s_dimvals[CGIO_MAX_DIMENSIONS];
-        for (int n=0; n<s_numdim; n++) {
+        for (n=0; n<s_numdim; n++) {
             s_dimvals[n] = array->dim_vals[n];
         }
-        for (int n=0; n<m_numdim; n++) {
+        for (n=0; n<m_numdim; n++) {
             m_dimvals[n] = m_arg_dimvals[n];
         }
 
@@ -1426,10 +1426,10 @@ int cgp_array_general_read_data(int A,
     cgsize_t stride[CGIO_MAX_DIMENSIONS];
     if (data) {
         cgsize_t s_dimvals[CGIO_MAX_DIMENSIONS];
-        for (int n=0; n<s_numdim; n++) {
+        for (n=0; n<s_numdim; n++) {
             s_dimvals[n] = array->dim_vals[n];
         }
-        for (int n=0; n<m_numdim; n++) {
+        for (n=0; n<m_numdim; n++) {
             m_dimvals[n] = m_arg_dimvals[n];
         }
 
